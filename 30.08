class PhoneBuilder:
	def __init__(self):
		self.phone = Phone()

	def set_os(self, os):
		self.phone.os = os
		return self

	def set_camera(self, camera):
		self.phone.camera = camera
		return self

	def set_battery(self, battery):
		self.phone.battery = battery
		return self

	def set_screen(self, screen):
		self.phone.screen = screen
		return self

	def get_phone(self):
		return self.phone









/////////////


from abc import ABCMeta, abstractmethod 
import copy 
 
 
# class - courses at the institute 
class Courses_JTP(metaclass=ABCMeta): 
 
   
   def __init__(self): 
      self.id = None 
      self.type = None 
 
   @abstractmethod 
   def course(self): 
      pass 
 
   def get_type(self): 
      return self.type 
 
   def get_id(self): 
      return self.id 
 
   def set_id(self, sid): 
      self.id = sid 
 
   def clone(self): 
      return copy.copy(self) 
 
# concrete course 
class Python(): 
   #Class for Data Structures and Algorithms""" 
    def __init__(self): 
      super(). __init__() 
      self.type = "Python Basic and Algorithm" 
 
   def course(self): 
      print(" Inside Python :: course() method ") 
 
# concrete course 
class Java(): 
   # Class for Java langauge""" 
   def __init__(self): 
      super().__init__() 
      self.type = "Java Basics and Spring Boot" 
 
   def course(self): 
      print(" Inside Python :: course() method. ") 
 
# concrete course 
class R(): 
   # Class for R langauge""" 
   def __init__(self): 
      super().__init__() 
      self.type = "R programming language" 
 
   def course(self): 
      print(" Inside Python :: course() method. ") 
 
 
# class - Courses At GeeksforGeeks Cache 
class Courses_Cache: 
   # cache to store useful information 
   cache = {} 
 
   @staticmethod 
   def get_course(sid): 
      COURSE = Courses_Cache.cache.get(sid, None) 
      return COURSE.clone() 
 
   @staticmethod 
   def load(): 
      Python = Python() 
      Python.set_id("1") 
      Courses_Cache.cache[Python.get_id()] = Python 
 
      Java = Java() 
      Java.set_id("2") 
      Courses_Cache.cache[Java.get_id()] = Java 
 
      R = R() 
      R.set_id("3") 
      Courses_Cache.cache[R.get_id()] = R 
 
# main function 
 
 
if __name__ == '__main__': 
   Courses_Cache.load() 
 
   Python = Courses_Cache.get_course("1") 
   print(Python.get_type()) 
 
   Java = Courses_Cache.get_course("2") 
   print(Java.get_type()) 
 
   R = Courses_Cache.get_course("3") 
   print(R.get_type()) 
Источник: https://pythonpip.ru/osnovy/shablon-proektirovaniya-prototipa-v-python
