from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List, Tuple

import json


# Модель (Model)
@dataclass
class HotDog:
    name: str
    price: float
    toppings: List[str]


class StandardHotDog(HotDog):
    def __init__(self):
        super().__init__("Standard", 3.99, ["Mustard", "Ketchup"])


class ChiliHotDog(HotDog):
    def __init__(self):
        super().__init__("Chili", 4.99, ["Chili", "Onions"])


class VeggieHotDog(HotDog):
    def __init__(self):
        super().__init__("Veggie", 4.49, ["Sauerkraut", "Relish"])


class CustomHotDog(HotDog):
    def __init__(self, name, toppings):
        super().__init__(name, 4.99, toppings)


# Контроллер (Controller)
class HotDogController:
    def __init__(self, inventory):
        self.inventory = inventory
        self.orders: List[HotDog] = []
        self.total_revenue = 0.0
        self.total_profit = 0.0

    def create_standard_hot_dog(self) -> HotDog:
        return StandardHotDog()

    def create_chili_hot_dog(self) -> HotDog:
        return ChiliHotDog()

    def create_veggie_hot_dog(self) -> HotDog:
        return VeggieHotDog()

    def create_custom_hot_dog(self, name: str, toppings: List[str]) -> HotDog:
        return CustomHotDog(name, toppings)

    def place_order(self, hot_dog: HotDog) -> Tuple[float, float]:
        self.orders.append(hot_dog)
        self.inventory.update_inventory(hot_dog.toppings)
        revenue, profit = self.calculate_order(hot_dog)
        self.total_revenue += revenue
        self.total_profit += profit
        return revenue, profit

    def calculate_order(self, hot_dog: HotDog) -> Tuple[float, float]:
        cost_per_hot_dog = 2.0
        revenue = hot_dog.price
        profit = revenue - cost_per_hot_dog
        if len(self.orders) >= 3:
            discount = 0.1
            revenue *= (1 - discount)
            profit *= (1 - discount)
        return revenue, profit

    def get_sales_report(self) -> dict:
        return {
            "Total Orders": len(self.orders),
            "Total Revenue": self.total_revenue,
            "Total Profit": self.total_profit
        }

    def get_inventory_report(self) -> dict:
        return self.inventory.get_inventory_status()


# Представление (View)
class HotDogView:
    def display_hot_dog_options(self, hot_dog_options: List[HotDog]):
        print("Choose a Hot Dog:")
        for i, option in enumerate(hot_dog_options):
            print(f"{i + 1}. {option.name} - ${option.price:.2f}")

    def get_user_input(self, prompt: str) -> str:
        return input(prompt)

    def display_order_details(self, hot_dog: HotDog, revenue: float, profit: float):
        print(f"You ordered a {hot_dog.name} Hot Dog:")
        print(f"Toppings: {', '.join(hot_dog.toppings)}")
        print(f"Total Price: ${revenue:.2f}")
        print(f"Profit: ${profit:.2f}")

    def display_sales_report(self, report: dict):
        print("Sales Report:")
        for key, value in report.items():
            print(f"{key}: {value}")

    def display_inventory_report(self, report: dict):
        print("Inventory Report:")
        for item, quantity in report.items():
            print(f"{item}: {quantity}")

    def display_low_inventory_message(self, low_inventory_items: List[str]):
        print("Low Inventory Items:")
        for item in low_inventory_items:
            print(f"- {item}")


# Инвентарь (Inventory)
class Inventory(ABC):
    @abstractmethod
    def update_inventory(self, toppings: List[str]):
        pass

    @abstractmethod
    def get_inventory_status(self) -> dict:
        pass


class JsonInventory(Inventory):
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.inventory = self.load_inventory()

    def load_inventory(self) -> dict:
        try:
            with open(self.file_path, "r") as file:
                return json.load(file)
        except FileNotFoundError:
            return {}

    def save_inventory(self):
        with open(self.file_path, "w") as file:
            json.dump(self.inventory, file)

    def update_inventory(self, toppings: List[str]):
        for topping in toppings:
            if topping in self.inventory:
                self.inventory[topping] -= 1
            else:
                self.inventory[topping] = 99

        self.save_inventory()

    def get_inventory_status(self) -> dict:
        return self.inventory


# Главная функция
def main():
    inventory = JsonInventory("inventory.json")
    controller = HotDogController(inventory)
    view = HotDogView()

    while True:
        view.display_hot_dog_options([
            controller.create_standard_hot_dog(),
            controller.create_chili_hot_dog(),
            controller.create_veggie_hot_dog()
        ])

        user_input = view.get_user_input("Enter your choice (1-3) or 'c' to create a custom hot dog: ")
        if user_input.lower() == "c":
            name = view.get_user_input("Enter the name of your custom hot dog: ")
            toppings = []
            while True:
                topping = view.get_user_input("Enter a topping (or press Enter to finish): ")
                if not topping:
                    break
                toppings.append(topping)
            hot_dog = controller.create_custom_hot_dog(name, toppings)
        else:
            try:
                hot_dog_index = int(user_input) - 1
                hot_dog_options = [
                    controller.create_standard_hot_dog(),
                    controller.create_chili_hot_dog(),
                    controller.create_veggie_hot_dog()
                ]
                hot_dog = hot_dog_options[hot_dog_index]
            except (ValueError, IndexError):
                print("Invalid choice. Please try again.")
                continue

        revenue, profit = controller.place_order(hot_dog)
        view.display_order_details(hot_dog, revenue, profit)

        low_inventory_items = [item for item, quantity in inventory.get_inventory_status().items() if quantity <= 10]
        if low_inventory_items:
            view.display_low_inventory_message(low_inventory_items)

        sales_report = controller.get_sales_report()
        view.display_sales_report(sales_report)

        inventory_report = controller.get_inventory_report()
        view.display_inventory_report(inventory_report)


if __name__ == "__main__":
    main()
